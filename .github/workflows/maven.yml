# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

#name: project cicd flow
#
#on:
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]
#
#jobs:
#  build:
#
#    runs-on: ubuntu-latest
#
#    steps:
#    - uses: actions/checkout@v3
#    - name: Set up JDK 17
#      uses: actions/setup-java@v3
#      with:
#        java-version: '17'
#        distribution: 'temurin'
#        cache: maven
#    - name: Build with Maven
#      run: mvn clean install
#
#
#
#
#    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
#    - name: Update dependency graph
#      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

name: project cicd flow

on:
  push:
    branches:
      - main # Change this to the branch you want to trigger the workflow on

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push Docker image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }} # Create a secret for your Docker Hub username
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }} # Create a secret for your Docker Hub password
        run: |
          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm64 -t akashpal14/kaiburr-server:latest .
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker push akashpal14/kaiburr-server:latest  

#      - name: Build & push Docker image
#        uses: mr-smithers-excellent/docker-build-push@v6
#        with:
#          image: AkashPal14/kaiburr-server
#          tags: latest
#          registry: docker.io
#          dockerfile: Dockerfile
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}

  deploy:
    runs-on: ubuntu-latest

    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Deploy to Production
        env:
          SPRING_PROFILES_ACTIVE: production
          MONGODB_URI: ${{ secrets.MONGODB_URI }} # Store your MongoDB connection string as a secret in your GitHub repository
        run: |
          mvn spring-boot:run -Dspring-boot.run.profiles=${SPRING_PROFILES_ACTIVE} -Dspring.data.mongodb.uri=${MONGODB_URI}

